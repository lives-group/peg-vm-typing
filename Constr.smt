(declare-datatypes () ((NT A B C )))
(declare-datatypes () ((Type
  (mk-type (is-null Bool) (head-set (Set NT))))))
(define-fun empty () (Set NT)
  ((as const (Set NT)) false))
(define-fun singleton ((a NT)) (Set NT)
  (store empty a true))
(define-fun union ((a (Set NT)) (b (Set NT))) (Set NT)
  ((_ map or) a b))
(define-fun imp ((b Bool) (s (Set NT))) (Set NT)
  (ite b s empty))
(define-fun prod ((a Type) (b Type)) (Type)
  (mk-type (and (is-null a) (is-null b))
    (union (head-set a) (imp (is-null a) (head-set b)))))
(define-fun sum ((a Type) (b Type)) (Type)
  (mk-type (or (is-null a)
               (is-null b))
           (union (head-set a)
                  (head-set b))))
(define-fun star ((a Type)) (Type)
  (mk-type true
           (head-set a)))
(define-fun neg ((a Type)) (Type)
  (mk-type true
           (head-set a)))
(define-fun member ((a NT) (t Type)) (Bool)
  (select (head-set t) a))

(declare-const t4 Type)
(declare-const t6 Type)
(declare-const t7 Type)
(declare-const t5 Type)
(declare-const t3 Type)
(declare-const t8 Type)
(declare-const t0 Type)
(declare-const t10 Type)
(declare-const t12 Type)
(declare-const t11 Type)
(declare-const t9 Type)
(declare-const t13 Type)
(declare-const t1 Type)
(declare-const t15 Type)
(declare-const t16 Type)
(declare-const t14 Type)
(declare-const t2 Type)
(declare-const t18 Type)
(declare-const t19 Type)
(declare-const t17 Type)

(assert (not (member B t1 )))
 (assert (= t4 (mk-type (is-null t1 ) (union (singleton B ) (head-set  t1 )))))
(assert (= t6 (mk-type false empty) ))
(assert (not (member A t0 )))
 (assert (= t7 (mk-type (is-null t0 ) (union (singleton A ) (head-set  t0 )))))
(assert (= t5 (prod t6 t7 )))
(assert (= t3 (prod t4 t5 )))
(assert (= t8 (mk-type false empty) ))
(assert (= t0 (sum t3 t8 )))
(assert (not (member C t2 )))
 (assert (= t10 (mk-type (is-null t2 ) (union (singleton C ) (head-set  t2 )))))
(assert (= t12 (mk-type false empty) ))
(assert (= t11 (star t12 )))
 (assert (not (is-null t12 )))
(assert (= t9 (prod t10 t11 )))
(assert (= t13 (mk-type false empty) ))
(assert (= t1 (sum t9 t13 )))
(assert (= t15 (mk-type false empty) ))
(assert (= t16 (mk-type false empty) ))
(assert (= t14 (prod t15 t16 )))
(assert (= t2 (neg t14 )))
(assert (not (member A t0 )))
 (assert (= t18 (mk-type (is-null t0 ) (union (singleton A ) (head-set  t0 )))))
(assert (= t19 (mk-type false empty) ))
(assert (= t17 (prod t18 t19 )))

(check-sat)
(get-model)
